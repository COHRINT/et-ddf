<launch>
  <arg name="asset_id" default="0"/>
  <arg name="ardusub_instance" default="0"/>
  <arg name="ardusub_params" default="$(find minau)/config/ardusub_sitl_no_gps.param"/>
  <arg name="latitude" default="0.0"/>
  <arg name="longitude" default="0.0"/>
  <!-- xyz and rpy to be defined in NED coordinate frame -->
  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.0"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>
  <arg name="use_360" default="False"/>
  <arg name="ping_range" default="15.0"/>

  <arg name="pole_x" default="10"/>
  <arg name="pole_y" default="0"/>


  <arg name="schedule_file" default="$(find minau)/config/schedules/schedule_3_assets.json"/>
  <!-- DDF params -->
  <arg name="blue_team_names" default="[]"/>
  <arg name="blue_team_positions" default="[]" />
  <arg name="red_team_names" default="[]"/>

  <group ns="bluerov2_$(arg asset_id)">
    <param name="asset_id" value="$(arg asset_id)"/>
  
    <!-- Spawn BlueROV2 model in the simulated environment (in ENU world frame) -->
    <include file="$(find bluerov2)/launch/upload_bluerov2.launch">
      <arg name="x" value="$(arg x)"/>
      <arg name="y" value="$(arg y)"/>
      <arg name="z" value="$(eval -z)"/>
      <arg name="roll" value="$(arg roll)"/>
      <arg name="pitch" value="$(arg pitch)"/>
      <arg name="yaw" value="$(eval yaw +0.0)"/>
      <arg name="mode" value="default"/>
      <arg name="namespace" value="bluerov2_$(arg asset_id)"/>
    </include>

    <!-- Start the ArduSub FSW for this vehicle instance -->
    <node name="sitl" pkg="minau" type="run_sitl.sh" args="$(find minau)/src/ardupilot/ArduSub $(arg ardusub_params) gazebo-bluerov2 $(arg ardusub_instance) $(arg latitude) $(arg longitude) $(arg yaw)" output="screen"/>

    <!-- Start the bridge between UUV Simulator and Ardupilot SITL for this vehicle -->
    <node name="bridge" pkg="minau" type="uuv_simulator_ardupilot_bridge.py" output="screen">
      <param name="num_thrusters" value="6"/>
      <param name="ardupilot_addr" value="127.0.0.1"/>
      <param name="ardupilot_port" value="$(eval 9003 + 10 * ardusub_instance)"/>
      <param name="bridge_addr" value="127.0.0.1"/>
      <param name="bridge_port" value="$(eval 9002 + 10 * ardusub_instance)"/>
    </node>

    <!-- Start the MAVROS node for this vehicle instance -->
    <include file="$(find minau)/launch/mavros.launch">
      <arg name="fcu_url" value="$(eval 'udp://0.0.0.0:'+str(14550 + 10 * ardusub_instance)+'@127.0.0.1:'+str(14555 + 10 * ardusub_instance))"/>
    </include>

    <!-- TODO (EBS): Start the SeaTrac (simulation) driver node -->
    <include file="$(find seatrac_driver)/launch/seatrac_driver.launch">
      <arg name="sim" value="true"/>
      <arg name="sim_comms_drop" value="true"/>
      <arg name="sim_tx_rate" value="true"/>
      <arg name="sim_modem_type" value="x010"/>
    </include>

    <!-- Define map to world transform (identity)-->
    <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_world_tf_publisher"
          args="0.0 0.0 0.0 0.0 0.0 0.0 1.0 map world"/>

    <!-- Start the EKF localization node -->
    <node name="ekf_map" pkg="robot_localization" type="ekf_localization_node">
      <param name="frequency" value="20.0"/>
      <param name="sensor_timeout" value="1.0"/>
      <param name="publish_tf" value="false"/>
      <param name="publish_acceleration" value="false"/>
      <param name="map_frame" value="map"/>
      <param name="odom_frame" value="bluerov2_$(arg asset_id)/odom"/>
      <param name="base_link_frame" value="bluerov2_$(arg asset_id)/base_link"/>
      <param name="world_frame" value="map"/>
      <param name="imu0" value="imu"/>
      <param name="imu0_differential" value="true"/>
      <param name="imu0_relative" value="false"/>
      <param name="imu0_remove_gravitational_acceleration" value="true"/>
      <rosparam param="imu0_config">
        [false, false, false,
         true, true, true,
         false, false, false,
         true, true, true,
         true, true, true]
      </rosparam>
      <param name="odom0" value="pose_gt"/>
      <param name="odom0_differential" value="false"/>
      <param name="odom0_relative" value="false"/>
      <param name="odom0_queue_size" value="10"/>
      <rosparam param="odom0_config">
        [true, true, true,
         true, true, true,
         false, false, false,
         false, false, false,
         false, false, false]
      </rosparam>
    </node>

    <!-- Start the MinAu DDF node -->
    <include file="$(find etddf)/launch/etddf.launch">
      <arg name="my_name" value="bluerov2_$(arg asset_id)"/>
      <arg name="blue_team_names" value="$(arg blue_team_names)"/>
      <arg name="blue_team_positions" value="$(arg blue_team_positions)"/>
      <arg name="red_team_names" value="$(arg red_team_names)" />
      <arg name="starting_position" value="[$(arg x), $(arg y), $(arg z)]" />
    </include>
    <!-- Start the MinAu Fleet Communication node -->
    <node name="fleet_communication" pkg="minau" type="fleet_communication_node.py" output="screen">
      <param name="rate" value="20.0"/>
      <param name="schedule_file" value="$(arg schedule_file)"/>
    </node>
    <!-- Start the SIMULATED SONAR Processing node -->
    <node name="sonar_processing" pkg="minau" type="sonar_processing_sim_node.py" output="screen">
      <param name="rate" value="1.0"/>
      <param name="fov_bearing_deg" value="130"/>
      <param name="fov_elevation_deg" value="20"/>
      <param name="fov_range_m" value="200"/>
      <param name="use_360" value="$(arg use_360)"/>
    </node>

    <!-- Ping360 nodes -->
    <node name="ping360" pkg="etddf" type="ping_360_node.py" output="screen">
        <param name="range" value="$(arg ping_range)"/>
    </node>

    <!-- <node name="ping360_processing" pkg="etddf" type="process_sonar_node.py" output="screen">
      <param name="pole_x" value="$(arg pole_x)"/>
      <param name="pole_y" value="$(arg pole_y)"/>
    </node> -->

    <!-- <node name="ping360_control" pkg="etddf" type="scanner_control_node.py" output="screen">
      <param name="pole_x" value="$(arg pole_x)"/>
      <param name="pole_y" value="$(arg pole_y)"/>
    </node> -->

    <!-- DVL -->
    <node name="dvl_node" pkg="etddf" type="dvl_sensor.py" output="screen">
      <param name="std_dev" value="0.1"/>
    </node>


    <!-- Start the MinAu UUV Control node for this vehicle instance -->
    <node name="uuv_control" pkg="minau" type="uuv_control_node.py" output="screen">
      <param name="config" value="$(find minau)/config/vehicle.sitl.json"/>
      <param name="rate" value="20.0"/>
    </node>
    <!-- TODO (EBS): Start the MinAu Sensor Manager node -->

    <!-- Start the MinAu Plan Manager node for this vehicle instance -->
    <node name="plan_manager" pkg="minau" type="plan_manager_node.py" output="screen">
      <param name="rate" value="20.0"/>
      <param name="publish_plan_markers" value="true"/>
      <param name="localization_fix/duration" value="10.0"/>
      <param name="localization_fix/heading" value="0.0"/>
      <param name="localization_fix/depth" value="1.5"/>
    </node>
  </group>
</launch>


